2+@
2+2
a<-2
a
rm(list = ls()); # clear workspace variables
cat("\014") # it means ctrl+L. clear window
graphics.off() # close all plots
DIR<-"C:/Users/dario/Documents/Github/Teacher-A-Statististical-Methods-BME-423/Week_1_Discussion";
setwd(DIR); # change working directory
setwd("~/Github/Teacher-A-Statististical-Methods-BME-423")
DIR<-"C:/Users/dario/Documents/Github/Teacher-A-Statististical-Methods-BME-423/Week_1_Discussion";
setwd(DIR); # change working directory
getwd()
?getwd()
?c
X<-c(2,2,2,2); # Vector [2,2,2,2]
Y<-matrix(,3,2); # 3(row) by 2(column) matrix -no values (NA)
Y
Y(1,2)<-1
Y_trans<-t(Y) # transpose
Y
Y<-matrix(,3,2); # 3(row) by 2(column) matrix -no values (NA)
Y
Y_trans<-t(Y) # transpose
Y
Y_trans
ncol(Y)# number of columns in a matrix
nrow(Y) # the number of rows
M<-matrix(1:6,3,2); # assign 1~6 into the elements of the matrix
M
M<-matrix(1:2,3,2); # assign 1~6 into the elements of the matrix
M
M<-matrix(1:8,3,2); # assign 1~6 into the elements of the matrix
M[2,2]# Find the chosen indexed value in the matrix
M[2,2]<-44
M
#M[2,2]<-44 #Assigning an specific value
M[1:2,]# Find several elements from the chosen indices
#M[2,2]<-44 #Assigning an specific value
M[1:2,1]# Find several elements from the chosen indices
#M[2,2]<-44 #Assigning an specific value
M[1:2,]# Find several elements from the chosen indices
M[1:2,1]# Find several elements from the chosen indices (first and second elements from rows)
M[1:2,2]# Find several elements from the chosen indices (first and second elements from rows)
M[1:2,2]# Find several elements from the chosen indices (first and second elements from second column)
M[1:2,,2]# Find several elements from the chosen indices (first and second elements from second row)
M[1:2,1,2]# Find several elements from the chosen indices (first and second elements from second row)
M[1:2,1,1]# Find several elements from the chosen indices (first and second elements from second row)
#M[2,2]<-44 #Assigning an specific value
M[1:2,]# Find several elements from the chosen indices (first and second element from both: columns and rows)
M[1:2,2]# Find several elements from the chosen indices (first and second elements from second row)
M[,2]#  (all elements from second row)
M<-matrix(1:6,3,2); # assign 1~6 into the elements of the matrix
M
#M[2,2]<-44 #Assigning an specific value
M[1:2,]# Find several elements from the chosen indices (first and second element from both: columns and rows)
#M[2,2]<-44 #Assigning an specific value
M[1:2,]# Find several elements from the chosen indices (first and second element from both: columns and rows)
M[1:2,1]#  (first and second element, first column)
M<-matrix(1:6,3,2); # assign 1~6 into the elements of the matrix
M
#[Columns , rows]
M[2,2]# Find the chosen indexed value in the matrix
M[2,2]<-44 #Assigning an specific value
M
M[1:2,]# Find several elements from the chosen indices (first and second element, all columns)
M[1:2,1]#  (first and second element, first column)
M[1:2,]# Find several elements from the chosen indices (first and second element, all columns)
M[1:2,1]#  (first and second element, first column)
M[1:2,2]#  (first and second elements from second column)
M[,2] #  (all elements from second row)
M[M>5]# Find elements of M that are larger than 5
#Data frames
D<-as.data.frame(M)# convert it to dataframe
colnames(D)<-c("COL1","COL2")# Define column names
D
colnames(D)# column names
names(D)# column names
rownames(D)# row names
D$COL1# look at one field/column
mypeople<-c("Bob","Joanne","Sally","Tim","Neal")# string array
mypeople
vNumeric   <- c(1, 2, 3)
vCharacter <- c("a", "b", "c")
vLogical   <- c(T, F, T)
dfa <- cbind(vNumeric, vCharacter, vLogical)
dfa  # Matrix of one data type
typeof(D)
#Data frames
D<-as.data.frame(M)# convert it to dataframe
colnames(D)<-c("COL1","COL2")# Define column names
D #See how column names have changed!
colnames(D)# column names
names(D)# column names
rownames(D)# row names
D$COL1# look at one field/column
mypeople<-c("Bob","Joanne","Sally","Tim","Neal")# string array
typeof(D)
vNumeric   <- c(1, 2, 3)
vCharacter <- c("a", "b", "c")
vLogical   <- c(T, F, T)
dfa <- cbind(vNumeric, vCharacter, vLogical)
dfa  # Matrix of one data type
df <- as.data.frame(cbind(vNumeric, vCharacter, vLogical))
df  # Makes a data frame with three different data types
typeof(df)
mean(D$COL1)
D
## 2. Load library
install.packages("psych")
install.packages("car")
install.package(Rtools)
install.packages(Rtools)
library(car) # function scatterplot
library(lattice) # function histogram
library(vioplot)
# install.packages("lsr")
# install.packages("ggplot2")
# install.packages("vioplot")
library(psych) # function describeBy
lsr
library(lsr)
lsr
install.packages("lsr")
# I recommend "pacman" for managing add-on packages. It will
# install packages, if needed, and then load the packages.
install.packages("pacman")
# I recommend "pacman" for managing add-on packages. It will
# install packages, if needed, and then load the packages.
install.packages("pacman")
install.packages("pacman")
# I recommend "pacman" for managing add-on packages. It will
# install packages, if needed, and then load the packages.
install.packages("pacman")
# Then load the package by using either of the following:
require(pacman)  # Gives a confirmation message.
library(pacman)  # No message.
## 2. Load library
install.packages("psych")
install.packages("car")
install.packages("lsr")
pacman::p_load(car)
pacman::p_load(lattice)
library(vioplot)
pacman::p_load(lattice)
pacman::p_load(violin)
# install.packages("ggplot2")
install.packages("vioplot")
install.packages("vioplot")
library(vioplot)
library(vioplot)
## 2. Load library
# install.packages("psych")
# install.packages("car")
# install.packages("lsr")
# install.packages("ggplot2")
install.packages("vioplot")
install.packages("vioplot")
install.packages("Rtools")
## 2. Load library
# install.packages("psych")
# install.packages("car")
# install.packages("lsr")
# install.packages("ggplot2")
install.packages("vioplot")
library(survival)
library(ggplot2)
library(car) # function scatterplot
library(lattice) # function histogram
library(vioplot)
## 3. Student data analysis
# Heart rate/Height/Sex/Side of room/Exercise frequency/Handedness/WidthRightThumb
DATA<-read.csv("All_Data_2020.csv", sep=",")
rm(list = ls()); # clear workspace variables
cat("\014") # it means ctrl+L. clear window
graphics.off() # close all plots
#DIR<-"~/Documents/RStudio"#"/Users/brittanypkay/Dropbox (University of Southern California)/BME423 2019Fa/Lectures/Week 1/Student stats"; # Current directory
DIR<-"C:/Users/dario/Documents/Github/Teacher-A-Statististical-Methods-BME-423";
setwd(DIR); # change working directory
## 2. Load library
# install.packages("psych")
# install.packages("car")
# install.packages("lsr")
# install.packages("ggplot2")
# install.packages("vioplot")
library(psych) # function describeBy
library(lsr)
library(survival)
library(ggplot2)
library(car) # function scatterplot
library(lattice) # function histogram
library(vioplot)
## 3. Student data analysis
# Heart rate/Height/Sex/Side of room/Exercise frequency/Handedness/WidthRightThumb
DATA<-read.csv("All_Data_2020.csv", sep=",")
mean(DATA$HR)
var(DATA$HR) # variance
sd(DATA$HR) # standard deviation
range(DATA$HR)
quantile(x=DATA$HR,probs=.5) # median
quantile(x=DATA$HR,probs=c(.25,.75)) # same as interquartile range
IQR(x=DATA$HR) # interquartile range
summary(DATA)
describe(DATA)
summary(DATA$HR)
# 4. Analysis of HR
# histogram
hist(x = DATA$HR,
main="Histogram of HR for all students",     # Title
ylab="Frequency",                            # axis label
xlab="HR (beats/min)",                       # axis label
#     density = 20,                               # shading lines: 20 per inch
#     angle = 20,                                 # angle of the shading lines is 20 degrees
#     border = "black",                           # colour of the borders of the bars
#     col = "black",                              # color of the shading lines. gray20 is darker than gray80
labels = TRUE,                               # frequency labels to each bar
xlim = c(40,140),                            # limits of axis
ylim = c(0,30),                              # limits of axis
breaks=seq(40,140,by=10)                     # bin breaks
)
# boxplot
boxplot(x=DATA$HR,
main="Boxplot of HR for all students",     # Title
ylab="HR (beats/min)",                     # axis labels
xlab="All students",                       # axis labels
border="black",                            # dim the border
#        frame.plot=FALSE,                         # frame border Y/N
#        staplewex=1,                              # staple Y/N
#        whisklty=3,                               # line type for whisker
ylim = c(40,140)                           # limits of axis
)
# violinplot
vioplot(x=DATA$HR,
main="Violinplots of HR for all students",     # Title
ylab="HR (beats/min)",                     # axis labels
xlab="All students",                       # axis labels
border="black",                            # dim the border
#        frame.plot=FALSE,                         # frame border Y/N
#        staplewex=1,                              # staple Y/N
#        whisklty=3,                               # line type for whisker
ylim = c(40,140)                           # limits of axis
)
# HR Results stratified by sex
#  -descriptive stats
describeBy(x=DATA$HR,group=DATA$Sex) # this does not give qunatiles
# Option 1 (output is not so easy to read)
aggregate(HR ~ Sex, data = DATA, fivenum) # "fivenum" reports the min, 1st quart., median, 3rd quart., and max (uses a diff. method from "summary")
# Option 2 (kinda clunky)
Ma <- subset(DATA, Sex == 'M')
Fe <- subset(DATA, Sex == 'F')
summary(Ma)
summary(Fe)
# histogram (one possible way)
histogram(~ HR | Sex, data = DATA)   # looks like hist and histogram are different
# so we do this the clunky way - separately for M and F
hist(x = Ma$HR,
main="Histogram of HR for males",      # Title
ylab="Frequency",                      # axis label
xlab="HR (beats/min)",                 # axis label
#     density = 20,                    # shading lines: 20 per inch
#     angle = 20,                      # angle of the shading lines is 20 degrees
#     border = "black",                # colour of the borders of the bars
#     col = "black",                   # color of the shading lines. gray20 is darker tsummhan gray80
labels = TRUE,                         # frequency labels to each bar
xlim = c(40,140),                      # limits of axis
ylim = c(0,20),                        # limits of axis
breaks=seq(40,140,by=10)               # bin breaks
)
hist(x = Fe$HR,
main="Histogram of HR for females",     # Title
ylab="Frequency",                       # axis label
xlab="HR (beats/min)",                  # axis label
#     density = 20,                     # shading lines: 20 per inch
#     angle = 20,                       # angle of the shading lines is 20 degrees
#     border = "black",                 # colour of the borders of the bars
#     col = "black",                    # color of the shading lines. gray20 is darker than gray80
labels = TRUE,                          # frequency labels to each bar
xlim = c(40,140),                       # limits of axis
ylim = c(0,20),                         # limits of axis
breaks=seq(40,140,by=10)                # bin breaks
)
# boxplot
boxplot(x=Ma$HR,
main="Boxplot of HR for males",     # Title
ylab="HR (beats/min)",              # axis labels
xlab="Males",                       # axis labels
border="black",                     # dim the border
#        frame.plot=FALSE,          # frame border Y/N
#        staplewex=1,               # staple Y/N
#        whisklty=3,                # line type for whisker
ylim = c(40,140)                    # limits of axis
)
# violinplot
vioplot(x=Ma$HR,
main="Violinplot of HR for males",     # Title
ylab="HR (beats/min)",              # axis labels
xlab="Males",                       # axis labels
border="black",                     # dim the border
#        frame.plot=FALSE,          # frame border Y/N
#        staplewex=1,               # staple Y/N
#        whisklty=3,                # line type for whisker
ylim = c(40,140)                    # limits of axis
)
# boxplot
boxplot(x=Fe$HR,
main="Boxplot of HR for females",     # Title
ylab="HR (beats/min)",                # axis labels
xlab="Females",                       # axis labels
border="black",                       # dim the border
#        frame.plot=FALSE,            # frame border Y/N
#        staplewex=1,                 # staple Y/N
#        whisklty=3,                  # line type for whisker
ylim = c(40,140)                      # limits of axis
)
# violinplot
vioplot(x=Fe$HR,
main="Violinplot of HR for females",     # Title
ylab="HR (beats/min)",                # axis labels
xlab="Females",                       # axis labels
border="black",                       # dim the border
#        frame.plot=FALSE,            # frame border Y/N
#        staplewex=1,                 # staple Y/N
#        whisklty=3,                  # line type for whisker
ylim = c(40,140)                      # limits of axis
)
# - Exploring if HR data are Normal using qqplots (qqnorm)
qqnorm(DATA$HR)
qqline(DATA$HR)
# 5. Analysis of Width of Right Thumb
# histogram
hist(x = DATA$WidthRightThumb,
main="Histogram of Width of Right Thumb \n for all students",     # Title
ylab="Frequency",                                              # axis label
xlab="WRT (mm)",                                               # axis label
#     density = 20,                                            # shading lines: 20 per inch
#     angle = 20,                                              # angle of the shading lines is 20 degrees
#     border = "black",                                        # colour of the borders of the bars
#     col = "black",                                           # color of the shading lines. gray20 is darker than gray80
labels = TRUE,                                                 # frequency labels to each bar
xlim = c(0,60),                                                # limits of axis
ylim = c(0,40),                                                # limits of axis
breaks=seq(0,60,by=5)                                          # bin breaks
)
# boxplot
boxplot(x=DATA$WidthRightThumb,
main="Boxplot of Width of Right Thumb \n for all students",   # Title
ylab="WRT (mm)",                                           # axis labels
xlab="All students",                                       # axis labels
border="black",                                            # dim the border
#        frame.plot=FALSE,                                 # frame border Y/N
#        staplewex=1,                                      # staple Y/N
#        whisklty=3,                                       # line type for whisker
ylim = c(0,60)                                             # limits of axis
)
# violinplot
vioplot(x=DATA$WidthRightThumb,
main="Violinplot of Width of Right Thumb \n for all students",   # Title
ylab="WRT (mm)",                                           # axis labels
xlab="All students",                                       # axis labels
border="black",                                            # dim the border
#        frame.plot=FALSE,                                 # frame border Y/N
#        staplewex=1,                                      # staple Y/N
#        whisklty=3,                                       # line type for whisker
ylim = c(0,60)                                             # limits of axis
)
# - Exploring if WRT data are Normal using qqplots (qqnorm)
qqnorm(DATA$WidthRightThumb)
qqline(DATA$WidthRightThumb)
# 6a. boxplot for Height
boxplot(x=DATA$Height,
main="Boxplot of Height for all students",     # Title
xlab="All students",                           # axis labels
border="black",                                # dim the border
#        frame.plot=FALSE,                     # frame border Y/N
#        staplewex=1,                          # staple Y/N
#        whisklty=3,                           # line type for whisker
ylim = c(50,84)                                # limits of axis
)
# 6b. violinplot for Height
vioplot(x=DATA$Height,
main="Violinplot of Height for all students",     # Title
xlab="All students",                           # axis labels
border="black",                                # dim the border
#        frame.plot=FALSE,                     # frame border Y/N
#        staplewex=1,                          # staple Y/N
#        whisklty=3,                           # line type for whisker
ylim = c(50,84)                                # limits of axis
)
# 7.  Bar plot/histogram for Eye Color
p <- ggplot(data.frame(DATA$EyeColor), aes(x=DATA$EyeColor),
#     density = 20,                                 # shading lines: 20 per inch
#     angle = 20,                                   # angle of the shading lines is 20 degrees
#     border = "black",                             # color of the borders of the bars
#     col = "black",                                # color of the shading lines. gray20 is darker than gray80
labels = TRUE,                                      # frequency labels to each bar
)
p + geom_bar() + ggtitle("Histogram of Eye Color for all students") +
ylab("Frequency") +
xlab("Eye Color")
# 8. X-Y (scatter) plot of WRT vs Height
#plot
plot(y=DATA$WidthRightThumb, x=DATA$Height,ylim=c(10,30),xlim=c(55,80),
main="Width of Rt. Thumb versus Height",     # Title
ylab="WRT (mm)",                                                  # axis labels
xlab="Height (inches)",                                           # axis labels
)
2+2
a<-10
a
rm(list = ls()); # clear workspace variables
cat("\014") # it means ctrl+L. clear window
graphics.off() # close all plots
DIR<-"C:/Users/dario/Documents/Github/Teacher-A-Statististical-Methods-BME-423/Week_1_Discussion"
DIR<-"C:/Users/dario/Documents/Github/Teacher-A-Statististical-Methods-BME-423/Week_1_Discussion";
setwd(DIR); # change working directory
?setwd
?ncol
a
a<-10
X<-c(2,2,2,2); # Vector [2,2,2,2]
X
Y<-matrix(,3,2); # 3(row) by 2(column) matrix -no values (NA)
Y_trans<-t(Y) # transpose
ncol(Y)# number of columns in a matrix
Y
M<-matrix(1:6,3,2); # assign 1~6 into the elements of the matrix
M
#[rows, columns]
M[2,2]# Find the chosen indexed value in the matrix
M<-matrix(1:6,3,2);
M<-matrix(1:6,3,2)
M[1:2,1]#  (first and second element, first column)
M[1:2,1]#  (first and second element, first column)
M[1:2,2]#  (first and second elements from second column)
M[,2] #  (all elements from second column)
M
D<-as.data.frame(M)# convert it to dataframe
D
colnames(D)<-c("COL1","COL2")# Define column names
D #See how column names have changed!
names(D)# column names
rownames(D)# row names
D$COL1# look at one field/column
D$COL1# look at one field/column
mypeople<-c("Bob","Joanne","Sally","Tim","Neal")# string array
typeof(D)
mean(D$COL1)
## 2. Load library
install.packages("psych")
install.packages("psych")
library(psych) # function describeBy
rm(list = ls()); # clear workspace variables
cat("\014") # it means ctrl+L. clear window
graphics.off() # close all plots
install.packages("car")
# I recommend "pacman" for managing add-on packages. It will
# install packages, if needed, and then load the packages.
install.packages("pacman")
# Then load the package by using either of the following:
require(pacman)  # Gives a confirmation message.
library(pacman)  # No message.
pacman::p_load(car,psych)
?savehistory
2+2
zz<-c(1,2,2)
?transpose
Y_transpose(ZZ)
t(zz)
zz
zz_trans<-t(zz)
zz_trans
savehistory('test.txt')
